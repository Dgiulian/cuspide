/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Listing = {
  _id: string;
  _type: "listing";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  type?: "venta" | "alquiler";
  slug?: Slug;
  property?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "property";
  };
  agent?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "agent";
  };
  featured?: boolean;
  currency?: "usd" | "ars";
  price?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Agent = {
  _id: string;
  _type: "agent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  phone?: string;
  email?: string;
  avatar?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Property = {
  _id: string;
  _type: "property";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  type?: "casa" | "departamento" | "duplex" | "terreno" | "local";
  lot_size?: number;
  surface?: number;
  rooms?: number;
  bathrooms?: number;
  year_built?: number;
  garage?: boolean;
  balcony?: boolean;
  province?: string;
  city?: string;
  orientation?: "norte" | "sur" | "este" | "oeste" | "noreste" | "noroeste" | "sureste" | "suroeste";
  amenities?: Array<string>;
  utilities?: Array<string>;
  image_cover?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  location?: Geopoint;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  publishedAt?: string;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Listing | Slug | Agent | Property | Geopoint | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/services/get-all-listings.ts
// Variable: ALL_LISTINGS_QUERY
// Query: *[      _type == "listing"    ]|order(featured, publishedAt desc)[0...12]    { _id,      title,      price,     currency,     slug,     featured,     property-> {         _id,        title,        type,        description,        rooms,        bathrooms,        lot_size,        garage,        slug,        publishedAt,        image_cover,        images,        location,        city,        state,        price,        currency        }      }
export type ALL_LISTINGS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  price: number | null;
  currency: "ars" | "usd" | null;
  slug: Slug | null;
  featured: boolean | null;
  property: {
    _id: string;
    title: string | null;
    type: "casa" | "departamento" | "duplex" | "local" | "terreno" | null;
    description: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    rooms: number | null;
    bathrooms: number | null;
    lot_size: number | null;
    garage: boolean | null;
    slug: null;
    publishedAt: string | null;
    image_cover: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    images: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }> | null;
    location: Geopoint | null;
    city: string | null;
    state: null;
    price: null;
    currency: null;
  } | null;
}>;

// Source: ./src/services/get-featured-properties.ts
// Variable: FEATURED_PROPERTIES_QUERY
// Query: *[    _type == "listing" && featured == true  ]|order(publishedAt desc)[0...12]  { _id,    title,    price,   currency,   slug,   featured,   property-> {       _id,      title,      type,      description,      rooms,      bathrooms,      lot_size,      garage,      slug,      publishedAt,      image_cover,      images,      location,      city,      state,      price,      currency      }    }
export type FEATURED_PROPERTIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  price: number | null;
  currency: "ars" | "usd" | null;
  slug: Slug | null;
  featured: boolean | null;
  property: {
    _id: string;
    title: string | null;
    type: "casa" | "departamento" | "duplex" | "local" | "terreno" | null;
    description: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    rooms: number | null;
    bathrooms: number | null;
    lot_size: number | null;
    garage: boolean | null;
    slug: null;
    publishedAt: string | null;
    image_cover: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    images: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }> | null;
    location: Geopoint | null;
    city: string | null;
    state: null;
    price: null;
    currency: null;
  } | null;
}>;

// Source: ./src/services/get-listing-by-slug.ts
// Variable: LISTING_BY_SLUG_QUERY
// Query: *[_type == "listing" && slug.current == $slug][0]  { _id,    title,    price,   currency,   slug,   featured,   property-> {       _id,      title,      type,      description,      rooms,      bathrooms,      lot_size,      garage,      publishedAt,      image_cover,      images,      location,      city,      state,      price,      currency,      }    }
export type LISTING_BY_SLUG_QUERYResult = {
  _id: string;
  title: string | null;
  price: number | null;
  currency: "ars" | "usd" | null;
  slug: Slug | null;
  featured: boolean | null;
  property: {
    _id: string;
    title: string | null;
    type: "casa" | "departamento" | "duplex" | "local" | "terreno" | null;
    description: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    rooms: number | null;
    bathrooms: number | null;
    lot_size: number | null;
    garage: boolean | null;
    publishedAt: string | null;
    image_cover: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    images: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }> | null;
    location: Geopoint | null;
    city: string | null;
    state: null;
    price: null;
    currency: null;
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[\n      _type == \"listing\"\n    ]|order(featured, publishedAt desc)[0...12]\n    { _id, \n     title, \n     price,\n     currency,\n     slug,\n     featured,\n     property-> { \n        _id,\n        title,\n        type,\n        description,\n        rooms,\n        bathrooms,\n        lot_size,\n        garage,\n        slug,\n        publishedAt,\n        image_cover,\n        images,\n        location,\n        city,\n        state,\n        price,\n        currency\n        }\n      }": ALL_LISTINGS_QUERYResult;
    "*[\n    _type == \"listing\" && featured == true\n  ]|order(publishedAt desc)[0...12]\n  { _id, \n   title, \n   price,\n   currency,\n   slug,\n   featured,\n   property-> { \n      _id,\n      title,\n      type,\n      description,\n      rooms,\n      bathrooms,\n      lot_size,\n      garage,\n      slug,\n      publishedAt,\n      image_cover,\n      images,\n      location,\n      city,\n      state,\n      price,\n      currency\n      }\n    }": FEATURED_PROPERTIES_QUERYResult;
    "*[_type == \"listing\" && slug.current == $slug][0]\n  { _id, \n   title, \n   price,\n   currency,\n   slug,\n   featured,\n   property-> { \n      _id,\n      title,\n      type,\n      description,\n      rooms,\n      bathrooms,\n      lot_size,\n      garage,\n      publishedAt,\n      image_cover,\n      images,\n      location,\n      city,\n      state,\n      price,\n      currency,\n      }\n    }": LISTING_BY_SLUG_QUERYResult;
  }
}
